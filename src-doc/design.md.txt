[TOC]

# TODO

- `DIAG`: draw diagrams for the given concept being discussion
- `OPEN`: open issue; resolve or explain why we leave it open

# System summary

Distributed network of data structures maintained by multiple independent
parties.

Most of the routing power of the system is delegated to the underlying social
network and the innate information-retrieval heuristics we have as humans,
rather than being inherently built into the system.

# System overview

The system has three main networks / planes of information that link to each
other.

- routing network - see the `index` section
- meta-routing network - see the `tgraph` section
- social network - see the `ptable` section

Some terminology:

- identity - a user on the social network
- tag - a semantic phrase used for describing objects


# Design assumptions

## Underlying storage network

System is independent of implementation of storage network.

Data structures for now are assumed to be located abstractly "on the network"
(rather than on the node of the maintainer) and can be retrieved at some cost
which increases polynomially wrt the size of the data.

This allows us to avoid dealing with the issue of churn.

This also forces us to consider a iterative routing algorithm rather than a
recursive one. The requestor pulls in data, then pulls in further data, etc,
instead of passing on requests and waiting for replies.


# Data structures

## `index`

DIAG

Maps tags to documents and other indexes.

This data structure contains information on how to satisfy a search request. It
contains mappings from tags to target documents, or to another index to forward
the request onto.

A mapping indicates some semantic relevance between the tag and the document,
and a subjective judgement that a person searching for the tag did intend to
retrieve information provided by the document.

The network formed by the links between indexes is conceptually analogous to
the network of routing tables existent in most typical navigable networks.

## `tgraph`

DIAG

Maps tags to other tags and other tgraphs.

This data structure contains information on how to traverse the routing
network. It contains mappings from tags to other tags, or to another tgraph
containing more data.

A mapping indicates a semantic relationship between the tags, and a subjective
judgement that an index specialising in the target tag is likely to contain
entries for the source tag.

The purpose of defining such a semantic relationship is to provide a framework
for traversing through index data. On most typical networks this framework is
encoded into the addressing scheme. For example, numerical addresses (such as
IP addresses) are naturally hierarchical, and can be prefix-matched on routing
tables. Tags however do not intrinsically encode such information, so we need
an extra plane to provide it.

In other words, a tag can be thought of as a pure name (ie. conveys no
information on the location of the target), and IP addresses as the exact
opposite. DNS names are somewhere in between - a name like "www.example.com"
provides some information on its location (ie. the subdomain hierarchy), but we
still need to start at the root servers.

## `ptable`

DIAG

A collection of pointers to tgraphs and indexes. This is one-per-identity only;
an identity's ptable should represent its own personal recommendations.

  used to "bootstrap" into a good part of the index network

## Approval ratings, &alpha;

These can be used to decide:

- priority of traversal (indexes, tgraphs)
- ranking of results

## Negative mappings and absence of mappings

Absence of mappings - does this mean "irrelevant", or information missing?

Negative mappings - don't have these, why not?


# Algorithms

## Obtaining initial ptables

## Combining tgraphs

## Combining &alpha; ratings for indexes

## Routing

### Traversing the `tgraph` network

### Traversing the `index` network

## Ranking


# UI

## Components

## Behaviour


# Design rationale

## Initial requirements

## Linking data structures

Pointing to mutable objects vs immutable objects


## Security

