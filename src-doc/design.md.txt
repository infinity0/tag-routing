# Meta

## Terminology

- arc -- a directed relation $e = (v_s, v_t)$ from node $v_s$ to node $v_t$.
- document -- a storage object that can be the target of some query. This could
  include (eg.) multimedia or software; for simplicity, we'll refer to these
  all as "document"
- identity -- a user / node on the social network
- node -- in the context of networks, an object that can be connected to
  another node by an arc.
- semantics -- this term is used in two different senses; hopefully the context
  should give enough disambiguation
	- the meaning of tags, wrt. the end-user
	- the meaning of some concept, wrt. the theory of this system
- tag -- a phrase that can be semantically related to a storage object

## Symbols

With no other context, the following symbols refer to the following object
types; capitalised symbols refer to the set of all objects of the given type.

- $d$ -- document
- $t$ -- tag
- $g$ -- `tgraph`
- $h$ -- `index`
- $p$ -- `ptable`
- $z$ -- identity
- $w$ -- weight, identity score

## Notation

- For any set $E = V_s \times V_t$ of arcs, define:
	- $src(E) = \{ v_s \in V_s : \exists v_t . (v_s, v_t) \in E \}$ ie. the set
	  of nodes that the arcs point from.
	- $dst(E) = \{ v_t \in V_t : \exists v_s . (v_s, v_t) \in E \}$ ie. the set
	  of nodes that the arcs point to.
- We deal with two types of data structures:
	- A map $V_A : V \to A$ of nodes to their attributes.
	- A map $E_A : E \to A$ of arcs to their attributes. For convenience, define:
		- $src(E_A) = src(E)$
		- $dst(E_A) = dst(E)$
- $f \subseteq X \to Y$ -- $f$ is a partial function from set $X$ to set $Y$.
	- This is non-standard but $f : X \to Y$ is confusing.

### Data structures

In the below notation, $\cdots$ denotes some additional predicate after a
subject, that serves as a specifier or definition for it.

Map $M = \{ x \cdots \mapsto y_x \cdots \} \quad | \quad M = \{ x_i \cdots \mapsto y_i \cdots \}_{i\cdots}$
:	A data structure that maps^[This is equivalent to a partial function: $M =
	\{ x_i \in X : y_i \in Y \}_i$ means the same thing as $M \subseteq X \to
	Y$; however (in my opinion) the former is easier for an implementor to
	read.] $x$ to $y_x$, or $x_i$ to $y_i$. In the second style, $i$ is a dummy
	variable used only to specify $x$, $y$ from the same pair; the actual value
	is unimportant and both $x_i$, $y_i$ are independent from it.
List $L = [ x_i \cdots ]_{i\cdots}$
:	A data structure that imposes an ordering $i$ on a collection of items
	$x_i$.

All data structures discussed from here onwards are implicitly finite in size.

## TODO and related tags

- `DIAG`: draw appropriate diagram here
- `TODO`: open issue; resolve or explain why we leave it open
- `MORE`: expand
- `EXTN`: a pointer to an external research topic, either potential or existing
- `REF`: add references for


# Overview

Distributed network of data structures maintained by multiple independent
parties.

Most of the routing power of the system is delegated to the underlying social
network and the innate information-retrieval heuristics we have as humans,
rather than being inherently built into the system.

How the properties of the system (performance, scalability, robustness) change
with the structure of the network forms the basis of the [analysis](#analysis).

The system has three main networks / planes of information that link to each
other.

- routing plane - see the `index` section
- meta-routing plane - see the `tgraph` section
- social plane - see the `ptable` section


# Specification

## Data structures

### Weight attributes

Structure
:	$w \in W = [0,1]$
Description
:	Aids comparison and composition of multiple nodes or arcs.

The precise meaning of a weight attribute is intrinsically linked with what the
routing and the ranking algorithms do. Specific uses include:

- priority of traversal of the routing and meta-routing networks
- ranking of query results

Probability-based semantics seem quite robust and reliable, since these are
objective properties and can (in theory) be estimated algorithmically. It also
gives rise to a simple way of combining weights (multiplication), as well as a
simple interval of values [0,1].^[Theoretically, this allows low-probability
weights to be defined for any possible arc. However, the system algorithms
favour heavy weights over light ones, so the latter should just be omitted,
since they will never be used.]

These weights allow algorithms to achieve a finer level of preference-choosing
than would otherwise be possible. However, care must be taken not to depend on
the precise values too much, or to treat the data as authoritative: even if
malicious data can be excluded, and the weights are defined on some objective
property, there will still be some degree of inconsistency between different
objects, since each publisher can only calculate weights from their subjective
(and limited) view of the entire network.

The best practical solution would be to have an automatic way of calculating
weight attributes. This would reduce the problem of human inaccuracy, as well
as laziness: it's tedious to manually estimate a weight for every object we
add to our collections. [EXTN]

### `index`

DIAG

Structure
:	$$
	h = \left[ \begin{array}{lrr} \\
	  E_h \subseteq & T \times D \cup H & \to W \\
	\end{array} \right]
	$$
Description
:	A map of arcs to their weights, where each arc is a relation from a tag to
	a document or another `index`.
Semantics
:	Probability that the arc target will satisfy a query for the source tag.

This data structure contains information on how to satisfy a search request. It
contains mappings from tags to target documents, or to another index to forward
the request onto.

A mapping indicates some semantic relevance between the tag and the document,
and a subjective judgement that a person searching for the tag did intend to
retrieve information provided by the document.

The analogy to typical navigable networks is that each tag is like an address;
and each `index` is like a routing table, mapping addresses to target entities.
^[Most "addresses" in this network will have multiple targets, but this is an
unimportant detail; eg. the internet has multicast addresses too.] So, we'll
call the network of `index` objects the "routing" plane.

Navigable networks have a well-defined addressing scheme, which enables routing
through a series of addresses to reach the target. For example, numerical
addresses (eg. IP) are naturally hierarchical, and can be prefix-matched upon
in a routing table. Tags however, do not intrinsically encode such information,
so we need an additional layer to provide it.

### `tgraph`

DIAG

Structure
:	$$
	g = \left[ \begin{array}{lrr} \\
	  V_g \subseteq & T & \to W \\
	  E_g \subseteq & T \times T \cup G & \to W \\
	\end{array} \right]
	$$
Description
:	1. A map of nodes to their weights, where each node is a tag; and
	2. A map of arcs to their weights, where each arc is a relation from a tag
	to another tag or `tgraph`.
Semantics
:	1. TODO
	2. Probability that a query for the target tag will return results for the
	   source tag (see [`tgraph` semantics](#tgraph-semantics))

This data structure provides information on tags and the relationships between
tags. The presence of a tag indicates an understanding of its meaning; an arc
from a tag to a tag or `tgraph` indicates a semantic relationship between them,
and a judgement that the target can be used in some appropriate way to satisfy
a query for the source tag.

From a given root tag, we can reach other tags and `tgraph`s by following the
arcs between them. Weights on the arcs and nodes help us to adapt the traversal
order to our purposes.

The analogy to typical navigable networks is that the graph of tags provides
the same service as an addressing scheme or a name resolution system: a method
for navigating between related addresses. This works beyond the routing level,
so we'll call the network of `tgraph` objects the "meta-routing" plane.

Conceptually, a tag can be thought of as a "pure" name - ie. the name carries
no information about its referent, such as its location). IP addresses are the
opposite, and DNS names are somewhere in between the two. DNS names need to be
resolved; likewise, we have an additional system here for tags.

### `ptable`

DIAG

Structure
:	$$
	p = \left[ \begin{array}{lrr} \\
	  V_p \subseteq & G \cup H & \to W \\
	\end{array} \right]
	$$
Description
:	A map of nodes to their weights, where each node is a `tgraph` or an
	`index`. Implicitly, each `ptable` "belongs" to some identity on the
	[underlying social network](#underlying-social-network).
Semantics
:	Probability that a ... TODO

This data structure allows an identity to declare a personal list of preferred
indexes and tgraphs to use for routing purposes.

This is intended to provide an attack-resistant "bootstrapping" path onto the
routing and meta-routing planes.

MORE

## Algorithms

Since network latency is far greater than processing latency, we design these
algorithms to be inherently concurrent. Operations involving retrieval of
remote objects will be non-blocking and allow other work to be done whilst
waiting for its results.

The entire system is constructed from various components, detailed below. Most
of them are interesting problems in themselves from a wide range of topics; as
research advances, each component can be upgraded independently.

### Combining data from multiple sources

#### Mean weight of a node

Given
:	- a map $M = \{ m \mapsto u_m \in W \}$ of node-maps to their weights,
	  where each $m = \{ v \in V \mapsto w_{mv} \in W \}$.
	- a given node $v \in \bigcup dom(m)$
Return
:	- the map-weighted mean node-weight $\bar{w}_v$ of $v$

The mean weight for node $v$, over all maps, is $\frac{\sum_{m} w_{mv}}{|M|}$.
If we take into account the weights of each map, we have $\frac{\sum_{m} u_m
w_{mv}}{\sum_m u_m}$. However, not every map will necessarily contain $v$, so
some $w_{mv}$ may be undefined. In such cases, we estimate a weight instead;
see the section on [zero weights](#zero-weight-attributes) for more details.
Following on from that, we reach:

$$
\bar{w}_v = \frac{\sum_{m} u_m \tilde{w}_{mv}}{\sum_m u_m}
\quad ; \quad
\tilde{w}_{mv} = \left\{ \begin{array}{llr} \\
  w_{mv} & : v \in dom(m) & (0) \\
  \alpha(m,v).\bar{w}_v + (1 - \alpha(m,v)).0 & : v \notin dom(m) & (1) \\
\end{array} \right
$$

where

- $\alpha(m, v)$ is the probability of $v \notin dom(m)$ being due to "missing
  information", rather than an explicit "zero weight".

The above definition has $\bar{w}_v$ on the RHS, so after some rearranging, we
get:

$$
% should be \dfrac but LaTeXMathML doesn't support amsmath commands...
\bar{w}_v = \frac{\sum_{m:(0)} u_m w_{mv}}{\sum_m u_m \beta(m,v)}
\quad ; \quad
\beta(m,v) = \left\{ \begin{array}{ll} \\
  1 & : (0) \\
  1 - \alpha(m,v) & : (1) \\
\end{array} \right
$$

#### Mean weight of an arc

Given
:	- a map $M = \{ m \mapsto u_m \in W \}$ of arc-maps to their weights,
	  where each $m = \{ e \in E \mapsto w_{me} \in W \}$.
	- a given arc $e = (v_s, v_t) \in \bigcup dom(m)$
Return
:	- the map-weighted mean arc-weight $\bar{w}_e$ of $e$

The formulat is similar to the one from the previous section, but here we are
dealing with arcs, so we can refine our estimate somewhat further; see the
section on [zero weights](#zero-weight-attributes) for more details. Following
on from that, we reach:

$$
\bar{w}_e = \frac{\sum_{m} u_m \tilde{w}_{me}}{\sum_m u_m}
\quad ; \quad
\tilde{w}_{me} = \left\{ \begin{array}{llr} \\
  w_{me} & : e \in dom(m) & (0) \\
  \alpha_1(m,e).\bar{w}_e & : e \notin dom(m) \;\wedge\; \{ v_s, v_t \}
    \not\subseteq src(m) \cup dst(m) & (1) \\
  \alpha_2(m,e).\bar{w}_e & : e \notin dom(m) \;\wedge\; \{ v_s, v_t \}
    \subseteq src(m) \cup dst(m) & (2) \\
\end{array} \right
$$

where

- $\alpha_1(m, e)$ is the probability that $e \notin dom(m)$ is due to "missing
  information", given that $m$ does not "know about" both $v_s, v_t$.
- $\alpha_2(m, e)$ is the probability that $e \notin dom(m)$ is due to "missing
  information", given that $m$ does "know about" both $v_s, v_t$.

The above definition has $\bar{w}_v$ on the RHS, so after some rearranging, we
get:

$$
% should be \dfrac but LaTeXMathML doesn't support amsmath commands...
\bar{w}_e = \frac{\sum_{m:(0)} u_m w_{me}}{\sum_m u_m \beta(m,e)}
\quad ; \quad
\beta(m,e) = \left\{ \begin{array}{ll} \\
  1 & : (0) \\
  1 - \alpha_1(m,e) & : (1) \\
  1 - \alpha_2(m,e) & : (2) \\
\end{array} \right
$$

### Initialisation

MORE blah blah, why etc

MORE only need to do this one, and then keep track of minor updates etc.

#### Obtaining initial ptables

Assume a given identity is already connected to the social network. MORE

Any system whose core functionality depends on a social network needs a method
of constructing a base network which is large enough. Luckily such systems are
already widely deployed on the www; new networks can bootstrap themselves by
extracting social data from existing networks, through invites, etc. [EXTN]

For our purposes, we need an algorithm which takes our own identity as input,
and outputs a set of identities to seed our routing algorithm with, possibly
with a weight associated with each identity.

Given
:	- our own identity
Return
:	- a set of seed identities, with corresponding scores

A basic implementation of this would be to return all nodes up to 2 hops away
from our own node. This would grab a decent number of nodes whilst offering
a basic level of protection against the most common and simple attacks. A
variation would be to filter out the 2-hop nodes that share very few mutual
1-hop friends with us (by some standard); this would be slightly harder to
attack.

Inferring attacks from the link structure of a social network is outside the
scope of this project. More advanced algorithms exist; a real implementation of
this system would be able to use the latest available techniques. [REF][EXTN]

#### Combining `ptable` objects

Given
:	- a map $P_s = \{(p_i, u_i)\}$ of `ptable`s to their identity scores
Return
:	- a `ptable` $p$ that "combines" this information, with $dom(p) = \bigcup
	  dom(p_i)$.

Define $G_s = dom(p) \cap G$ and $H_s = dom(p) \cap H$. (Note that $G + H =
dom(p)$).

A basic implementation is just to calculate the score-weighted average^[These
weights are [limited in range](#weight-attributes), and so should be resistant to
average-manipulation attacks] of the weight of each node, ie:

$p[o] = \bar{\omega} = \frac{\sum_i u_i \omega_i}{\sum_i u_i}$

where $\omega_i$ is the adjusted weight of $o$ in $p_i$, inferring between a
[zero weight](#zero-weight-attributes) and "missing information".

$$
\omega_i = \left\{ \begin{array}{lll} \\
 w_i = p_i[o]        & : \quad & o \in p_i \\
 \alpha.\bar{\omega} & : \quad & o \notin p_i \\
\end{array} \right
$$

where $\alpha$ is the probability of $o \notin p_i$ being due to "missing
information".

TODO derive the non-recursive form of this.

Here we need to determine realistic values for $\alpha$. There are various
possible ways of doing this, typically by using training data collected from a
real network. More advanced techniques include collecting data directly from
the active network to adjust the values dynamically; this has the advantage
that the training data is more relevant to the trainee. [EXTN]

Such methods are likely to be quite complex, so to keep things simple for this
project, we use a constant estimate of $\alpha = \frac{1}{2}$.^[Intuitively,
for any given target, $P(like)$ and $P(know)$ are low but slightly correlated,
so $P(\neg like \wedge \neg know)$ is high, but not very high.]

### Meta-routing

We want to construct a routing scheme from the `tgraph` plane, which will be
relative to some given root tag $t_0$. Since `tgraph` data is distributed
across many objects, we need various methods of combining these into a single
tree of tags.

We start from our seed `tgraph` set $G_s$. If $t_0$ does not appear in $G_s$,
we have a few backup options:

- ask the user to supply some related tags. This should not be a significant
  problem; people usually "have an idea" of what they are looking for.
- ask more nodes in the social graph for their `ptable`s. This can be done
  automatically, which makes things more convenient for a user. However, it
  increases the risk of an attack through the social network.

MORE

TODO TODO TODO need to update pretty much all of the algorithms here now that
nodes have weights too... pah...

#### Combining `tgraph` objects

Given
:	- a working map $G_w = \{(g_i, u_i)\}$ of `tgraph`s to their weights
	- a source tag $t$
Return
:	- a map $\{(x_j, w_j)\}$ from `tgraph` arc targets (ie. a tag or tgraph) to
	  their weights; the source of each arc is implicitly $t$.

A basic implementation is just to calculate the `tgraph`-weighted average of
the weight of the arc $(t, x_j)$, ie:

$w_j = \bar{\omega} = \frac{\sum_i u_i \omega_i}{\sum_i u_i}$

where $\omega_i$ is the adjusted weight of the arc $(t, o)$ in $g_i$, inferring
between a [zero weight](#zero-weight-attributes) and "missing information".

$$
\omega_i = \left\{ \begin{array}{lll} \\
 g_i[t, x_j]         & : \quad & (t, x_j) \in g_i \\
 \alpha.\bar{\omega} & : \quad & (t, x_j) \notin g_i \wedge x_j \in dom(g_i) \cup img(g_i) \\
 \beta.\bar{\omega}  & : \quad & (t, x_j) \notin g_i \wedge x_j \notin dom(g_i) \cup img(g_i) \\
\end{array} \right
$$

where $\alpha$ and $\beta$ is the probability of $(t, x_j) \notin g_i$ being
due to "missing information", given whether $g_i$ "knows about" $x_j$.

TODO derive the non-recursive form of this.

This is essentially the same algorithm that we use to [combine
`ptable`s](#combining-ptable-objects), with additional tweaks to take advantage
of the additional tag information present here.

Like the other algorithm, we need to determine realistic values for $\alpha$
and $\beta$. The same points apply here, and again for temporary simplicity we
pick $\alpha = $ and $\beta = $. TODO

#### Determining `tgraph` traversal order

Given
:	- a working map $G_w = \{(g_i, w_i)\}$ of `tgraph`s to their weights
	- a working tree $T_w$ of tags
Return
:	- an ordered list $[(t_i \in T_w, x_i, w_i)]$ of `tgraph` arcs to add to
	  the tree

A basic implementation can simply return the "nearest" node to the root not
already in the tree, where "distance" of a path is defined as the negative log
of the product of its arc weights. MORE

TODO this has the potential to be very shit. needs more work. see [`tgraph`
semantics](#tgraph-semantics)

If the first element can be added to the tree immediately, we do so, and call
the method recursively, ignoring the other elements returned. In the other case
(`tgraph`) we need to wait for the object to be retrieved from the network; in
the meantime we can go through the list and add the other elements, applying
the same principle to $t_1$, etc...

#### Weight of a `tgraph` not in the working set

Given
:	- a working map $G_w = \{(g_i, w_i)\}$ of `tgraph`s to their weights
	- a new `tgraph` $g_n \notin dom(G_w)$
Return
:	- a weight $w_n$ to assign to $g_n$

MORE note the two different semantic meanings for weight attributes being used
here (relevancy vs reliability) TODO explore this and its potential pitfalls

### Routing

DIAG

The data structure we use to keep track of routing progress is a working
(mutable) tree of tags, $T_w$. For each tag $t \in T_w$, we keep track of its
working `index` set, $H_w[t]$, and its queried `index` set, $H_c[t] \subseteq
H_w[t]$. For each index $h \in H_c[t]$, we also keep track of the results that
the query $(h, t)$ returned, as $R_c[t][h]$.

Define $Q_p(T_w, H_w) = \{(h,t): t \in T_w, h \in H_w[t]\}$, the set of all
possible queries to be made.

Initially, $T_w$ contains only our original search term $t_0$, and we let
$H_w[t_0] = H_s$, our [seed set](#combining-multiple-ptable-objects)).

In the background, $T_w$ will be continually having new tags added to it, by
the [meta-routing]() algorithms. When a new tag is added, we need to detect
this, and initialise its working index set with a copy of its parent's.

Meanwhile, we perform the queries in $Q_p(T_w, H_w)$ in some appropriate order.
Multiple queries can be performed in parallel; this should not affect the final
output (including ranking of results, etc), for a given final tracking state
$(T_w, H_w, H_c, R_c)$.

When a query $(h, t)$ completes, we update $H_c[t]$ and $R_c[t][h]$ accordingly.
If the result set contains any new index pointers, these may contain additional
entries for $t$ and terms related to it. In this case, we add such queries to
our queue, by adding $h'$ to the working set of $t$, and that of all its
ancestors and descendents too.

This algorithm has no natural logical termination condition; the queries can
theoretically proceed indefinitely until the entire network has been searched.
In practice, we would automatically pause the search after a given number of
results have been returned, and probably give the user the option to resume
from the paused state, resources permitting.

#### Determining `index` query order

Given
:	- a working tree $T_w$ of tags
	- a map $H_w$ of each $t \in T_w$ to its "working `index`" set
	- a map $H_c$ of each $t \in T_w$ to its "queried `index`" set
Return
:	- an ordered list $[(h_i, t_i)] \subseteq Q_p(T_w, H_w) \setminus Q_p(T_w,
	  H_c)$ of queries to perform

Tags further away from the root are less "related" to the original query, but
searches for them are more likely to succeed (for rare searches), so the
algorithm should proceed by searching near the root, then further up the tree.

MORE same principle about concurrency as mentioned before about tag/tgraphs.


### Ranking

#### Combining results from different queries

Given
:	- a working tree $T_w$ of tags
	- a map $H_w$ of each $t \in T_w$ to its "working `index`" set
	- a map $H_c$ of each $t \in T_w$ to its "queried `index`" set
	- a map $R_c$ of each $t \in T_w$ to (a map of each "queried `index`" $h
	  \in H_c[t]$ to its results set)
Return
:	- a results map $R = \{(d_i, w_i)\}$ from documents to their weights




## Optimising performance

### Data structure implementation

### Querying an `index` or `tgraph` for presence of a source tag

Bloom filters

### Querying an `index` or `tgraph` for weight of an external target

...


## UI

### Components

### Behaviour


# Design

## Objectives

## Assumptions

### Abstract storage network

Our search system assumes that its data objects are located on some abstract
lower-level storage network. Data objects can always be retrieved, instead of
being stored locally with its maintainer, who may be offline. This simplifies
our design, since it allows us to avoid dealing with the issue of churn by
delegating it to an independent component. [EXTN]

This also forces us to consider a iterative routing algorithm rather than a
recursive one, since data objects are "dumb" and cannot respond to dynamic
queries. Instead, a requestor must retrieve the data, process it themselves,
then pull in further data, etc.

Any distributed storage network that has a global address scheme (such as a
binary-key address space) would be suitable, since pointers to objects can be
represented simply as its address. This includes all Distributed Hash Tables
(DHTs), as well as more complex cryptokey-based addresses such as Freenet's
Signed Subspace Keys network.

### Underlying social network

The initialisation algorithm assumes an abstract lower-level social network
where it can look for friends to query for pointers onto the meta-routing and
routing planes.

The network is modelled as a directed weighted graph; arcs represent a degree
of trust by the source node in the target node, and arc weights are restricted
to the interval $[0,1]$.

This model is sufficiently general for our purposes. Many social networking
websites only recognise mutual friendship; this is a degenerate form of the
model, where all weights are constant and all arcs have a reverse-direction
counterpart.

The meta-routing and routing planes also form what is essentially a social
network - `tgraph`s and `index`es effectively contain pointers to each other,
through their arc targets. However, these also carry semantic information (each
arc has a source tag) and are intrinsic to our search system; by constrast, the
social network used for initialisation carries no semantic information and is
independent of our system. To highlight this difference, we refer to a node on
the social network as an "identity", and arc weights as "identity scores".

MORE talk about churn, virtual social networks (WoT on Freenet's SSK), etc

MORE proxy services

## `tgraph` semantics

The routing algorithm needs some way of inferring which tags (out of a related
set) are more "general" or "specific".

Our first thought was to have arcs represent a relationship from a more
"specific" tag to a more "general" tag. However, this is problematic since:

- The relationship is supposed to be transitive, but our graph can potentially
  contain cycles, especially when pulling in data from several sources. We
  don't want to be tied up devising a complex algorithm to resolve this.
- We potentially would like to traverse from general to specific tags, as well
  as vice versa; and arc targets are the only mechanism of doing this *between
  `tgraph`s*.^[Within a `tgraph`, arc sources ("reverse" pointers) could in
  theory be calculated quickly, depending on the implementation.]

The metric "probability of a query for $t_trg$ satisfying a query for $t_src$"
addresses the above issues. It is clearly quantifiable; also intuitively, for
real data it would usually be bidirectional but asymmetrical. This fits in with
our model of a (potentially cyclic) weighted directed graph, and also allows us
to traverse between related tags in both directions.

We still need a way of knowing which tags are more/less "general". We can do
this by designing an algorithm to infer this from the arc weights, or by
explicitly assigning a weight to each tag (node). The latter is simpler, but
may have reliability problems since it adds much data to process, and to depend
on the correctness of.

The algorithmic approach is much more complex; at the moment I have no solid
ideas on how to proceed; intuitively, a PageRank-like approach could work. This
topic can be explored elsewhere [EXTN]; for now we choose the simple approach
and require that `tgraph` nodes be assigned weights too.

Possible semantics for tag weights could include:

- fraction of indexes that have definitions for this tag
- fraction of arcs (in all indexes) with this tag as its source
- probability a search will return a decent (by some standard) amount of
  results for this tag

The first two are unlikely to give values close to 1 for any tag; on the other
hand the third option is likely to give values close to 1 for pretty much
anything that is slightly popular... TODO

## Pointers between data structures

### Identity-object pointers

vs. all-data-in-identity and identity-identity pointers

### Object-object pointers vs identity-object pointers

to decrease the number of identity-object pointers

### Mutable-object pointers vs immutable-object pointers

## Weights

### Zero weight-attributes

The current design can only represent the presence of a semantic relationship,
and not its absence. This is a problem: any distributed system has to be able
to deal with incomplete information, but here there is no way to tell if the
absence of an object from a collection is due to incomplete information, or an
explicit rejection of the semantic relationship that the object represents.
This is important when (eg.) we combine weights from multiple sources - we
need to know whether others disagree with an attribute definition, or merely
don't know about its subject.

Requiring explicit "zero" weight-attributes is not acceptable for our purposes.
For a set of nodes, this requires defining *something* for the entire network;
for a set of arcs, we can safely (TODO - explain why) restrict our domain to
the nodes we encounter, but this still equates to defining *something* (either
a relationship or its absence) between *all* pairs of nodes, which results in
quadratic data growth wrt objects encountered, which is not scalable. [TODO
rewrite properly.]

Instead, we look at heuristics that attempt to resolve this ambiguity.

For an object $O$ containing arcs, such as `index` and `tgraph`, we observe
that the presence of an arc $(s, t)$ indicates that the maintainer knows of the
existence of $s$ and $t$, and has enough information to make judgements about
them.

Define $O$ "knows about" $s$ to mean $s \in dom(O) \cup img(O)$. Since the
meaning of $(s, t)$ depends only on $s$ and $t$, the maintainer also has enough
information to decide whether to include an arc between *any* source and *any*
target that it "knows about". Conversely, for any given arc $(x, y)$ *not*
present in $O$, if it "knows about" both $x$ and $y$, then it seems reasonable
to conclude that the absence of the arc "probably" represents a zero weight
(non-relationship), rather than "missing information".

- For a `tgraph` $g$, we guess that any $(t_1,t_2) \notin g$, with $t_1, t_2
  \in dom(g) \cup img(g)$, is "probably" a zero weight and not "missing
  information".
- For an `index` $h$, we guess that any $(t,d) \notin h$, with $t \in dom(g)$
  and $d \in img(g)$, is "probably" a zero weight and not "missing
  information".

Specific examples of this general principle, as well as applications of it,
is explored further in relevant sections of the [Algorithms](#algorithms)
chapter.

For an object consisting only of nodes, such as `ptable`, there is not enough
information within a single object that could be used for any heuristic to
distinguish the two cases.^[Using the heuristic described above for arcs, by
treating the nodes as arcs from a single source node doesn't help: an arc $(x,
y)$ cannot exist with the required properties since $x$ is fixed.]

However, in the specific case of `ptable`, we could use the links present in
the social network to infer more information: eg. identities who are friends
are likely to "know about" similar sets of objects. In practice, such methods
are hard to get accurate^[A basic heuristic would be to assume that some
fraction of an identity's friends "know about" each object that its `ptable`
points to; however the real fraction is unlikely to be near-constant over all
objects, so the scheme would greatly disadvantage rare objects. We could take
this into account and estimate the "knows about" fraction based on the fraction
of identities that explicitly reference the target, but this is becoming more
and more complicated with increasingly hand-waving arguments.], and probably
won't provide significantly enough benefit to justify the additional complexity
- the social network should mitigate most serious attempts to abuse the system.
MORE

### Negative weight-attributes

A related idea is negative weight-attributes, which would represent a judgement
that the subject is malicious (in some sense), rather than neutral or "useless".
In a network where it's possible to act aggressively towards particular nodes,
these weights could provide information on who to attack (or equivalently, set
up defences against), and in what way.

As it stands, our search system is a "dumb" network of data; the only way of
interacting with other nodes is by publishing data objects for other nodes to
read. We are unable to see other nodes' read requests, so it's impossible to
attack a particular node. In this case then, negative weights are not useful.

There are other complications with negative weights in general. These would be
relevant if our search system is adapted into a form where one *can* perform
targeted acts of aggression.

- If positive weights are taken to be probabilities, it's not obvious what
  negative weights should mean. If the semantics of the data structure are not
  well-defined, the algorithms that use it cannot be, either.
- Depending on the algorithm used to combine weights from multiple sources,
  negative weights may allow the weight system itself to be used as an attack
  vector. (Otherwise, this was already possible with positive-only weights and
  the introduction of negative weights makes no difference.)
- MORE

### Corruption of weights

Scoring systems are susceptible to manipulation... the usual path to corruption
is that original semantics of the system are no longer reflected in algorithms
for calculating and evaluating it. When this happens the system breaks...

(eg. google's "trusted ads" are 2x likely to be corrupt)


# Analysis

## Data extraction and processing

last.fm, flickr

social network - relatively easy

### Transforming a simple graph into a `tgraph`

tgraphs arcs have weight and direction

## Test networks

### Inter-node properties

- neighbour count (ie. degree) distribution
- neighbour semantic relation distribution

### Intra-node properties

- semantic unity (how "related" its tags are)
- semantic specialty (how "general" its tags are)

### Generation algorithms

- Use network formed by extracted data ("real world")
- Barabási-Albert model (preferential attachment)
  - scale-free
  - not small-world; according to wikipedia:
    - clustering coefficient is power-law, similar to hierarchical networks
    - small-world networks have constant clustering coefficient
- TODO etc. read up on network theory.
- hierarchies
- other structures?

Ideally we want a single algorithm which takes as input, various parameters for
the properties listed in the previous two sections, and outputs a random graph
with those properties.

## Simulation

### Request models

### Network conditions

- perfect conditions
- random failure
- malicious attacks - under the assumptions of "abstract storage network", only
  attacks vs the entire network can occur on the meta-routing / routing planes.
  attacks vs individuals on the social plane is a separate topic, ignore here
	- attacks vs most well-connected nodes
	- MORE


# Java class definitions

Note: I started doing these, then thought I'd leave it for the coding stage;
Here's what I have so far.


~~~{.java}
	interface NetworkStorageAdapter {

		Index getIndex(ObjectID id);

		TGraph getTGraph(ObjectID id);

	}
~~~


~~~{.java}
	interface SocialNetworkAdapter {

		Map<Identity, IdScore> getFriends(Identity id);

		PTable getPTable(Identity id);

	}
~~~


~~~{.java}
	interface SeedSetGetter {

		/**
		** @param self
		**  	A root identity (typically our own)
		** @return
		**  	A set of seed identities, with corresponding weights
		*/
		Map<Identity, IdScore> getSeedSet(Identity self);

	}
~~~


~~~{.java}
	interface TGraphComposer {

		/**
		** @param tables
		**
		** @return
		**  	A set of mapping targets (which can be a tag or tgraph) and
		**  	their weights; the source of each mapping being the source tag
		**
		*/
		Map<TGraphEntry, EntryWeight> compositeTGraphNode(Map<TGraph, EntryWeight> , Tag source);

	}
~~~


~~~{.java}
	interface PTableComposer {

		/**
		** @param tables
		**  	A set of ptables, each being mapped to its identity's score.
		** @return
		**  	A ptable that combines all of the input information, with
		**  	$dom(p) = \bigcup dom(p_i)$.
		*/
		PTable composite(Map<PTable, IdScore> tables);

	}
~~~
