% Construction and implementation
% Ximin Luo

# Project infrastructure

- version control
- build system (ant; maven overkill)

# Routing system

java, blah blah blah

## Architecture

description of java packages, structure, paradigms

- abstract "process" model - QueryAgent, QueryEnvironment, QueryProcess
- layering, message passing
- heavy use of generics

## Design patterns

- proxy objects, etc. java collections framework very flexible, extend this.
  "views" of data
- adaptors, decorators, proxies
- factory & builder classes


# Evaluation code

python,
- development speed & availability of libraries vs optimisation

description of python modules
- threading for quick development, python-futures
- libraries used: flickrapi, igraph, sqlite3
- managed to stay within flickrAPI use limit

## Performance issues

- heavy optimisation, switched from bsddb to sqlite, tmpfs, custom pickle formats
- store parts of a large object separately
- lack of true multithreading, not too much of a problem
- threading used only to simplify parallel IO, instead of dealing with complexities of event-based models


# Data format

- data format used - GraphML, no good java libraries, heavy subclassing and
  hack an existing library (JUNG) to read attribute types. required reading
  a significant part of the GraphML specification.

- luckily igraph is good at both reading and writing
- used Graphviz for visualising graphs, neato renderer into SVG format


# Running the tests

results observed...

