% Meta-documentation
% Ximin Luo

# Notation

## Glossary

arc
:	a directed relation $e = (v_s, v_t)$ from node $v_s$ to node $v_t$.
document
:	a storage object that can be the target of some query. This could include
	(eg.) multimedia or software; for simplicity, we'll refer to these all as
	"document".
identity
:	a node ("user") on the social network
in-arc, in-degree, in-node (of a subject node)
:	respectively: (an incoming arc, the total number of incoming arcs, a
	neighbour on the other side of an incoming arc) of the subject node.
local view
:	for a remote object $x$, the local view $\ddotx$ holds the parts of $x$
	that have been retrieved from the network, ie. data that is immediately
	available to the local system. $\ddotx$ has the ability to distinguish
	between items found not to exist in $x$, and items not yet loaded.
neighbour (of a subject node)
:	a node separated from the subject node by a single arc
node
:	in the context of a graph or a network, a unique individual
out-arc, out-degree, out-node (of a subject node)
:	respectively: (an outgoing arc, the total number of outgoing arcs, a
	neighbour on the other side of an outgoing arc) of the subject node.
semantics
:	this term is used in two different senses; hopefully the context should
	give enough disambiguation: the meaning of tags, w.r.t. the end-user; or
	the meaning of some concept, wrt. the theory of this system.
tag
:	a semantic unit used to describe documents in a useful way to end users.

## Data structures

Here, we document the notation we use for describing the data structures we
use. All are implicitly finite in size.

Partial function $f \subseteq X \to Y$
:	This is non-standard, but $f : X \to Y$ is ambiguous - existing literature
	uses it to mean both a partial or a total function, depending on author.

### Simple objects

Tuple $X = ( a,b,\ldots )$
:	an ordered container of items, of fixed size
:	- the parentheses may be omitted when the context is clear
Union $U = ( a|b|\ldots )$
:	a container holding a single value of any of the specified types
:	- the parentheses may be omitted when the context is clear
Map $M = \{ x : y \}$
:	a container that maps[^mapfn] $x$ to $y$.
:	- write $y_x$ to mean "the $y$ that	$x$ maps to".
	- let $x \in M$ mean the same thing as $x \in \dom M$.
	- the braces may be omitted when the context is clear
List $L = [ x_i ]_{i}$
:	an ordered container of items, of unfixed size

[^mapfn]: This is equivalent to a partial function: $M = \{ x_i \in X \mapsto
y_i \in Y \}_i$ means the same thing as $M \subseteq X \to Y$; however, the
former is a better description of a static data structure.

### Composite objects

We make heavy use of these container objects:

- maps $V_A : V \to A$ of nodes to their attributes.
- maps $E_A : E \to A$ of arcs to their attributes.

These are used in various combinations to represent graphs, inverted indexes,
etc.

For any set $E \subseteq V_s \times V_t$ of arcs, define:

- $\src E = \{ v_s \in V_s : \exists v_t . (v_s, v_t) \in E \}$ ie. the set
  of nodes that the arcs point from.
- $\dst E = \{ v_t \in V_t : \exists v_s . (v_s, v_t) \in E \}$ ie. the set
  of nodes that the arcs point to.
- $\rft E = \src E \cup \dst E$ ie. the set of nodes that E refers to.

For convenience, let this also apply to arc-attribute maps, ie. $\rft E_A =
\rft E$.

### System-relevant objects

With no other context or indication, the following single-letter symbols refer
to the following object types. Capitalised symbols refer to the set of all
objects of the given type; this is also partly reflected in the source code.

-----------------------------------------------------------------------
Symbol          Object type
--------------- -------------------------------------------------------
$d$             document

$t$             tag

$g$             `tgraph`

$h$             `index`

$p$             `ptable`

$z$             identity

$s$             node attribute (identity score)

$w$             arc attribute (tag-tag weight or tag-doc weight)

$u$             node attribute (tag weight or resource value)

------------------------------------------------------------------------

Details about these object types, their structure and semantics, are contained
in the design document.


# Bibliography

etc etc etc





# Interface

Clicking the arrows next to the menus will toggle the visibility of their
children. Shift-clicking will do this recursively for all descendents at all
levels.


# About

These documents were prepared in [pandoc markdown](http://johnmacfarlane.net/pandoc/).

