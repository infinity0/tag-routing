LocalIndex and LocalTGraph need to check for loops
Probability needs to check for div/0 errors

(cleanup)
- review Maps.viewSubMap
- review CompositeMap, MeanEntropyComposer
- test ProbabilityEntropyTGraphComposer, ProbabilityIndexComposer

(laterz)
- rename Probability to just Prob?
- rename SPUProbabilityInferer to ShortPathUnionProbInferer?
- possibly move AddressScheme.pushNode* into ProtoAddressScheme

(very later)
- add tags.rout.IndexComposer to the design document
- explain how tags are scored, in the design document


(architecture issues)
current architecture has each QueryProcessor spawn new Contact/Naming/Routing
layers. ideally, Contact should be split off from this, since the information
it uses is independent of any query.

to do this we first need to extend MessageReceiver.recv() to accept a "sender"
argument, or something.




== Contact ==

	NEW
		: REQ_MORE_DATA (go to MAKE_SEEDS)
	MAKE_SEEDS
		- do stuff etc, don't respond to message queue
		- send RECV_SEED_[GH] to Naming, Routing
		- go to IDLE
	IDLE
		: REQ_MORE_DATA (not implemented or planned yet)


== Naming ==

	NEW
		: REQ_MORE_DATA (pass to Contact and go to AWAIT_SEEDS)
	AWAIT_SEEDS
		: RECV_SEED_G (process seeds and go to IDLE)
	IDLE
		: REQ_MORE_DATA (potentially pass to Contact, or
		                 go to MAKE_ADDR_SCH)
	MAKE_ADDR_SCH
		: do stuff etc, don't respond to message queue
		- either complete a tag, or add a data source
		- send RECV_ADDR_SCH to Routing
		- go to IDLE

== Routing ==

	NEW
		: REQ_MORE_DATA (pass to Naming and go to AWAIT_SEEDS)
	AWAIT_SEEDS
		: RECV_SEED_H (process seeds and go to IDLE)
	IDLE
		: REQ_MORE_DATA (pass to Naming, or
		                 go to MAKE_RESULTS)
		: RECV_ADDR_SCH (process address scheme and go to MAKE_RESULTS)
	MAKE_RESULTS
		: do stuff etc, don't respond to message queue
		- either do some lookups, or add a data source
		- go to IDLE
