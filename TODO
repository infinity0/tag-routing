LocalIndex and LocalTGraph need to check for loops
Probability needs to check for div/0 errors

(cleanup)
- review Maps.viewSubMap
- review CompositeMap, MeanEntropyComposer
- test ProbabilityEntropyTGraphComposer, ProbabilityIndexComposer

(laterz)
- rename Probability to just Prob?
- rename SPUProbabilityInferer to ShortPathUnionProbInferer?
- possibly move AddressScheme.pushNode* into ProtoAddressScheme

(very later)
- add tags.rout.IndexComposer to the design document
- explain how tags are scored, in the design document


(architecture issues)
current architecture has each QueryProcessor spawn new Contact/Naming/Routing
layers. ideally, Contact should be split off from this, since the information
it uses is independent of any query.

to do this we first need to extend MessageReceiver.recv() to accept a "sender"
argument, or something.


----

scraper

OPT HIGH need to make photo-scraper use less memory, probably don't need to
build a graph and just write each photo to disk as we scrape it, probably.




inferGroupArcs(group_sample):
	Given a sample of groups, infer arcs between them.
	- get users intersection; keep arc only if (significantly?) better than
	  independent intersections


makeTgraphsAndIndexes(producer_graph):
	Given a graph of producers, generate tgraphs from the narrow peak, and
	indexes from the fat tail.

	ie. 80-20 rule, but actually decide a precise way of doing these.
	- half of area-under-graph for each?


invertIndex(docset):
	Given a docset, generate tag->doc arcs and their attributes, and a subset
	of these for which it's appropriate to "point to" the set with (ie.
	attribute greater than some threshold)




# optional, possibly this is necessary for good tgraph generation


generateSuperProducer(producer_graph, seed, size):
	Given a graph of producers, generate a superproducer from the seed group
	and the given size, based on clustering analysis.


generateSuperProducers(producer_graph):
	Given a graph of producers, generate superproducers following a power-law
	distribution

	- then make social links between these supergroups and the normal groups
	- TODO HOW??



